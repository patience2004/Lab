
lab 4 .

#include<stdio.h>

#include<stdlib.h>

void evaluate();
void push(char);
char pop();
int prec(char);

char infix[30], postfix[30], stack[30];
int top = -1;

void main() {
  printf("\nEnter the valid infix expression:");
  scanf("%s", infix);
  evaluate();
  printf("\nThe entered infix expression is :\n %s \n", infix);
  printf("\nThe corresponding postfix expression is :\n %s \n", postfix);
}

void evaluate() {
  int i = 0, j = 0;
  char symb, temp;

  push('#');

  for (i = 0; infix[i] != '\0'; i++) {
    symb = infix[i];
    switch (symb) {
    case '(':
      push(symb);
      break;

    case ')':
      temp = pop();
      while (temp != '(') {
        postfix[j] = temp;
        j++;
        temp = pop();
      }
      break;
    case '+':
    case '-':
    case '*':
    case '/':
    case '%':
    case '^':
    case '$':
      while (prec(stack[top]) >= prec(symb)) {
        temp = pop();
        postfix[j] = temp;
        j++;
      }
      push(symb);
      break;
    default:
      postfix[j] = symb;
      j++;
    }
  }
  while (top > 0) {
    temp = pop();
    postfix[j] = temp;
    j++;
  }
  postfix[j] = '\0';
}

void push(char item) {
  top = top + 1;
  stack[top] = item;
}

char pop() {
  char item;
  item = stack[top];
  top = top - 1;
  return item;
}

int prec(char symb) {
  int p;
  switch (symb) {
  case '#':
    p = -1;
    break;

  case '(':
  case ')':
    p = 0;
    break;

  case '+':
  case '-':
    p = 1;
    break;

  case '*':
  case '/':
  case '%':
    p = 2;
    break;

  case '^':
  case '$':
    p = 3;
    break;
  }
  return p;
}


3

#include <stdio.h>
#define MAX 100

int stack[MAX];
int top = -1;

void push(int element) {
    if (top == MAX - 1) {
        printf("Stack Overflow\n");
    } else {
        stack[++top] = element;
        printf("Element %d pushed onto the stack\n", element);
    }
}

int pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        return -1;
    } else {
        int element = stack[top--];
        printf("Element %d popped from the stack\n", element);
        return element;
    }
}

void display() {
    if (top == -1) {
        printf("Stack is empty\n");
    } else {
        printf("Elements in the stack: ");
        for (int i = top; i >= 0; i--) {
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

int isPalindrome(char str[]) {
    int i = 0;
    int j = top;
    while (i < j) {
        if (str[i] != stack[j]) {
            return 0;
        }
        i++;
        j--;
    }
    return 1;
}

int main() {
    int choice, element;
    char str[MAX];
    
    do {
        printf("\n--- MENU ---\n");
        printf("1. Push an element onto the stack\n");
        printf("2. Pop an element from the stack\n");
        printf("3. Check if a string is a palindrome using the stack\n");
        printf("4. Display the status of the stack\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &element);
                push(element);
                break;
            case 2:
                pop();
                break;
            case 3:
                printf("Enter a string: ");
                scanf("%s", str);
                for (int i = 0; str[i] != '\0'; i++) {
                    push(str[i]);
                }
                if (isPalindrome(str)) {
                    printf("%s is a palindrome\n", str);
                } else {
