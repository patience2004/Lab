
lab 2::::

#include<stdio.h>

char str[50], pat[20], rep[20], res[50];
int c = 0, m = 0, i = 0, j = 0, k, flag = 0;
void stringmatch() {
  while (str[c] != '\0') {
    if (str[m] == pat[i]) {
      i++;
      m++;
      if (pat[i] == '\0') {
        flag = 1;
        for (k = 0; rep[k] != '\0'; k++, j++) {
          res[j] = rep[k];
        }
        i = 0;
        c = m;
      }
    } else {
      res[j] = str[c];
      j++;
      c++;
      m = c;
      i = 0;
    }
  }
  res[j] = '\0';
}
void main() {
  printf("Enter the main string:");
  gets(str);
  printf("\nEnter the pat string:");
  gets(pat);
  printf("\nEnter the replace string:");
  gets(rep);
  printf("\nThe string before pattern match is:\n %s", str);
  stringmatch();
  if (flag == 1)
    printf("\nThe string after pattern match and replace is: \n %s ", res);
  else
    printf("\nPattern string is not found");
}


lab 3:::

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define MAX 5
int s[MAX],top = -1,item;
int IsFull()
{
 if(top>=MAX-1)
 return 1;
 return 0;
}
int IsEmpty()
{
 if(top= = -1)
 return 1;
 return 0;
}
void push(int item)
{
 top++;
 s[top]=item;
}
void pop()
{
 item=s[top];
 top--;
}
void display()
{
 int i;
 printf("\n the elements of the stack are");
 for(i=top;i>=0;i--)
 printf("\n %d",s[i]);
}
void check_pal()
{
 int num=0,temp,digit,revnum=0,k=0;
 if(top==-1)
 {
 printf("Stack is empty\n");
 return;
 }
 else
 {
 while(top!=-1)
 {
 pop();
 num=num*10+item;
 revnum=item*pow(10,k)+revnum;
 k=k+1;
 }
 printf("\nReverse Number of %d is is: %d\n",num, revnum);
 if(num == revnum)
 printf("The stack contains a Palindrome number\n");
 else
 printf("The stack does not contain a Palindrome number\n");
 }
}
void main()
{
int ch;
 do
 {
 printf("\n1. Push \n2. Pop \n3. Display\n4. Check Palindrome 5. Exit\n");
 printf("\n Enter the choice: ");
 scanf("%d",&ch);
 switch(ch)
 {
 case 1: printf("\n Enter the element to be inserted");
 scanf("%d",&item);
 if(IsFull())
 printf("Stack Overflow\n");
 else
 push(item);
 break;
 case 2: if(IsEmpty())
 printf("Stack Underflow\n");
 else
 {
 pop();
 printf("The item deleted is %d\n",item);
 }
 break;
 case 3: if(IsEmpty())
 printf("Stack is Empty\n");
 else
 display();
 break;
 case 4: check_pal();
 break;
 case 5: printf("Program Terminated \n");
exit(0);
 default:printf("Invalid choice: \n");
 }
 }while(ch!=5);
}



lab 4 .

#include<stdio.h>

#include<stdlib.h>

void evaluate();
void push(char);
char pop();
int prec(char);

char infix[30], postfix[30], stack[30];
int top = -1;

void main() {
  printf("\nEnter the valid infix expression:");
  scanf("%s", infix);
  evaluate();
  printf("\nThe entered infix expression is :\n %s \n", infix);
  printf("\nThe corresponding postfix expression is :\n %s \n", postfix);
}

void evaluate() {
  int i = 0, j = 0;
  char symb, temp;

  push('#');

  for (i = 0; infix[i] != '\0'; i++) {
    symb = infix[i];
    switch (symb) {
    case '(':
      push(symb);
      break;

    case ')':
      temp = pop();
      while (temp != '(') {
        postfix[j] = temp;
        j++;
        temp = pop();
      }
      break;
    case '+':
    case '-':
    case '*':
    case '/':
    case '%':
    case '^':
    case '$':
      while (prec(stack[top]) >= prec(symb)) {
        temp = pop();
        postfix[j] = temp;
        j++;
      }
      push(symb);
      break;
    default:
      postfix[j] = symb;
      j++;
    }
  }
  while (top > 0) {
    temp = pop();
    postfix[j] = temp;
    j++;
  }
  postfix[j] = '\0';
}

void push(char item) {
  top = top + 1;
  stack[top] = item;
}

char pop() {
  char item;
  item = stack[top];
  top = top - 1;
  return item;
}

int prec(char symb) {
  int p;
  switch (symb) {
  case '#':
    p = -1;
    break;

  case '(':
  case ')':
    p = 0;
    break;

  case '+':
  case '-':
    p = 1;
    break;

  case '*':
  case '/':
  case '%':
    p = 2;
    break;

  case '^':
  case '$':
    p = 3;
    break;
  }
  return p;
}




lab 5(a)::::

 #include<stdio.h>
 #include<stdlib.h>
 #include<math.h>
 #include<ctype.h>
 int i, top = -1;
 int op1, op2, res, s[20];
 char postfix[90], symb;

 void push(int item) {
   top = top + 1;
   s[top] = item;
 }

 int pop() {
   int item;
   item = s[top];
   top = top - 1;
   return item;
 }

 void main() {
   printf("\nEnter a valid postfix expression:\n");
   scanf("%s", postfix);
   for(i = 0; postfix[i] != '\0'; i++) {
     symb = postfix[i];
     if(isdigit(symb)) {
       push(symb - '0');
     } else {
       op2 = pop();
       op1 = pop();
       switch (symb) {
       case '+':
         push(op1 + op2);
         break;
       case '-':
         push(op1 - op2);
         break;
       case '*':
         push(op1 * op2);
         break;
       case '/':
         push(op1 / op2);
         break;
       case '%':
         push(op1 % op2);
         break;
       case '$':
       case '^':
         push(pow(op1, op2));
         break;
       default:
         push(0);
       }
     }
   }
   res = pop();
   printf("\n Result = %d", res);
 }





lab 6:::

#include <stdio.h>#include<stdlib.h>#include<stdio_ext.h>#define MAX 3char cq[MAX];
int front = -1, rear = -1;void insert(char);
void delete();
void display();
void main() {
int ch;
char item;
while (1) {
printf("\n\n~~Main Menu~~");
printf("\n==> 1. Insertion and Overflow Demo");
printf("\n==> 2. Deletion and Underflow Demo");
printf("\n==> 3. Display");
printf("\n==> 4. Exit");
printf("\nEnter Your Choice: ");
scanf("%d", & ch);
__fpurge(stdin);
switch (ch) {
case 1:
printf("\n\nEnter the element to be inserted: ");
scanf("%c", & item);
insert(item);
break;
case 2:
delete();
break;
case 3:
display();
break;
case 4:
exit(0);
default:
printf("\n\nPlease enter a valid choice");
}
}
}void insert(char item) {
if (front == (rear + 1) % MAX) {
printf("\n\n~~Circular Queue Overflow~~");
} else {
if (front == -1)
front = rear = 0;
else
rear = (rear + 1) % MAX;
cq[rear] = item;
}
}void delete() {
char item;
if (front == -1) {
printf("\n\n~~Circular Queue Underflow~~");
} else {
item = cq[front];
printf("\n\nDeleted element from the queue is: %c ", item);if (front == rear) //only one element
front = rear = -1;
else
front = (front + 1) % MAX;
}
}void display() {
int i;
if (front == -1) {
printf("\n\nCircular Queue Empty");
} else {
printf("\nCircular Queue contents are:\n");
printf("Front[%d]-> ", front);
for (i = front; i != rear; i = (i + 1) % MAX) {
printf(" %c", cq[i]);
}
printf(" %c", cq[i]);
printf(" <-[%d]Rear", rear);
}
}





lab 7:::
#include<stdio.h>

#include<stdlib.h>

struct node {
  char usn[25], name[25], branch[25];
  int sem;
  long int phone;
  struct node * link;
};
typedef struct node * NODE;

NODE start = NULL;
int count = 0;

NODE create() {
  NODE snode;
  snode = (NODE) malloc(sizeof(struct node));

  if (snode == NULL) {
    printf("\nMemory is not available");
    exit(1);
  }
  printf("\nEnter the usn,Name,Branch, sem,PhoneNo of the student:");
  scanf("%s %s %s %d %ld", snode -> usn, snode -> name, snode -> branch, & snode -> sem, & snode -> phone);
  snode -> link = NULL;
  count++;
  return snode;
}

NODE insertfront() {
  NODE temp;
  temp = create();
  if (start == NULL) {
    return temp;
  }

  temp -> link = start;
  return temp;
}

NODE deletefront() {
  NODE temp;
  if (start == NULL) {
    printf("\nLinked list is empty");
    return NULL;
  }

  if (start -> link == NULL) {
    printf("\nThe Student node with usn:%s is deleted ", start -> usn);
    count--;
    free(start);
    return NULL;
  }
  temp = start;
  start = start -> link;
  printf("\nThe Student node with usn:%s is deleted", temp -> usn);
  count--;
  free(temp);
  return start;
}

NODE insertend() {
  NODE cur, temp;
  temp = create();

  if (start == NULL) {
    return temp;
  }
  cur = start;
  while (cur -> link != NULL) {
    cur = cur -> link;
  }
  cur -> link = temp;
  return start;
}

NODE deleteend() {
  NODE cur, prev;
  if (start == NULL) {
    printf("\nLinked List is empty");
    return NULL;
  }

  if (start -> link == NULL) {
    printf("\nThe student node with the usn:%s is deleted", start -> usn);
    free(start);
    count--;
    return NULL;
  }

  prev = NULL;
  cur = start;
  while (cur -> link != NULL) {
    prev = cur;
    cur = cur -> link;
  }

  printf("\nThe student node with the usn:%s is deleted", cur -> usn);
  free(cur);
  prev -> link = NULL;
  count--;
  return start;
}

void display() {
  NODE cur;
  int num = 1;

  if (start == NULL) {

    printf("\nNo Contents to display in SLL \n");
    return;
  }
  printf("\nThe contents of SLL: \n");
  cur = start;
  while (cur != NULL) {
    printf("\n||%d|| USN:%s| Name:%s| Branch:%s| Sem:%d| Ph:%ld|", num, cur -> usn, cur -> name, cur -> branch, cur -> sem, cur -> phone);
    cur = cur -> link;
    num++;
  }
  printf("\n No of student nodes is %d \n", count);
}

void stackdemo() {
  int ch;
  while (1) {
    printf("\n~~~Stack Demo using SLL~~~\n");
    printf("\n1:Push operation \n2: Pop operation \n3: Display \n4:Exit \n");
    printf("\nEnter your choice for stack demo:");
    scanf("%d", & ch);

    switch (ch) {
    case 1:
      start = insertfront();
      break;
    case 2:
      start = deletefront();
      break;
    case 3:
      display();
      break;
    default:
      return;
    }
  }
  return;
}

int main() {
  int ch, i, n;
  while (1) {
    printf("\n~~~Menu~~~");
    printf("\nEnter your choice for SLL operation \n");
    printf("\n1:Create SLL of Student Nodes");
    printf("\n2:DisplayStatus");
    printf("\n3:InsertAtEnd");
    printf("\n4:DeleteAtEnd");
    printf("\n5:Stack Demo using SLL(Insertion and Deletion at Front)");
    printf("\n6:Exit \n");
    printf("\nEnter your choice:");
    scanf("%d", & ch);

    switch (ch) {
    case 1:
      printf("\nEnter the no of students: ");
      scanf("%d", & n);
      for (i = 1; i <= n; i++)
        start = insertfront();
      break;

    case 2:
      display();
      break;

    case 3:
      start = insertend();
      break;

    case 4:
      start = deleteend();
      break;

    case 5:
      stackdemo();
      break;

    case 6:
      exit(0);

    default:
      printf("\nPlease enter the valid choice");

    }
  }
}



lab 8::

#include<stdio.h>#include<stdlib.h>struct node {
char ssn[25], name[25], dept[10], designation[25];
int sal;
long int phone;
struct node * llink;
struct node * rlink;
};
typedef struct node * NODE;NODE first = NULL;
int count = 0;NODE create() {
NODE enode;
enode = (NODE) malloc(sizeof(struct node));
if (enode == NULL) {
printf("\nRunning out of memory");
exit(0);
}
printf("\nEnter the ssn,Name,Department,Designation,Salary,PhoneNo of the employee: \n");
scanf("%s %s %s %s %d %ld", enode -> ssn, enode -> name, enode -> dept, enode -> designation, & enode -> sal, & enode -> phone);
enode -> llink = NULL;
enode -> rlink = NULL;
count++;
return enode;
}NODE insertfront() {
NODE temp;
temp = create();
if (first == NULL) {
return temp;
}
temp -> rlink = first;
first -> llink = temp;
return temp;
}void display() {
NODE cur;
int nodeno = 1;
cur = first;
if (cur == NULL)
printf("\nNo Contents to display in DLL");
while (cur != NULL) {
printf("\nENode:%d||SSN:%s|Name:%s|Department:%s|Designation:%s|Salary:%d|Phone no:%ld", nodeno, cur -> ssn, cur -> name, cur -> dept, cur -> designation, cur -> sal, cur -> phone);
cur = cur -> rlink;
nodeno++;
}
printf("\nNo of employee nodes is %d", count);
}NODE deletefront() {
NODE temp;
if (first == NULL) {
printf("\nDoubly Linked List is empty");
return NULL;
}
if (first -> rlink == NULL) {
printf("\nThe employee node with the ssn:%s is deleted", first -> ssn);
free(first);
count--;
return NULL;
}
temp = first;
first = first -> rlink;
temp -> rlink = NULL;
first -> llink = NULL;
printf("\nThe employee node with the ssn:%s is deleted", temp -> ssn);
free(temp);
count--;
return first;
}NODE insertend() {
NODE cur, temp;
temp = create();if (first == NULL) {
return temp;
}
cur = first;
while (cur -> rlink != NULL) {
cur = cur -> rlink;
}cur -> rlink = temp;
temp -> llink = cur;
return first;
}NODE deleteend() {
NODE prev, cur;
if (first == NULL) {
printf("\nDoubly Linked List is empty");
return NULL;
}if (first -> rlink == NULL) {
printf("\nThe employee node with the ssn:%s is deleted", first -> ssn);
free(first);
count--;
return NULL;
}prev = NULL;
cur = first;while (cur -> rlink != NULL) {
prev = cur;
cur = cur -> rlink;
}cur -> llink = NULL;
printf("\nThe employee node with the ssn:%s is deleted", cur -> ssn);
free(cur);
prev -> rlink = NULL;
count--;
return first;
}void deqdemo() {
int ch;
while (1) {
printf("\nDemo Double Ended Queue Operation");
printf("\n1:InsertQueueFront\n 2: DeleteQueueFront\n 3:InsertQueueRear\n 4:DeleteQueueRear\n 5:DisplayStatus\n 6: Exit \n");
scanf("%d", & ch);switch (ch) {
case 1:
first = insertfront();
break;
case 2:
first = deletefront();
break;
case 3:
first = insertend();
break;
case 4:
first = deleteend();
break;
case 5:
display();
break;
default:
return;
}
}
}void main() {
int ch, i, n;
while (1) {
printf("\n\n~~~Menu~~~");
printf("\n1:Create DLL of Employee Nodes");
printf("\n2:DisplayStatus");
printf("\n3:InsertAtEnd");
printf("\n4:DeleteAtEnd");
printf("\n5:InsertAtFront");
printf("\n6:DeleteAtFront");
printf("\n7:Double Ended Queue Demo using DLL");
printf("\n8:Exit \n");
printf("\nPlease enter your choice: ");
scanf("%d", & ch);switch (ch) {
case 1:
printf("\nEnter the no of Employees:   ");
scanf("%d", & n);
for (i = 1; i <= n; i++)
first = insertend();
break;case 2:
display();
break;case 3:
first = insertend();
break;case 4:
first = deleteend();
break;case 5:
first = insertfront();
break;case 6:
first = deletefront();
break;case 7:
deqdemo();
break;case 8:
exit(0);
default:
printf("\nPlease Enter the valid choice");
}
}
}


lab 10::

#include <stdio.h>
#include <stdlib.h>
struct BST
{
int data;
struct BST *left;
struct BST *right;
};
typedef struct BST NODE;
NODE* createtree(NODE *root, int data)
{
if (root == NULL)
{
NODE *temp;
temp = (NODE*) malloc (sizeof(NODE));
temp->data = data;
temp->left = temp->right = NULL;
return temp;
}
if (data < (root->data))
root->left = createtree(root->left, data);
else if (data > root->data)
root -> right = createtree(root->right, data);
return root;
}

void inorder(NODE *root)

{

if(root != NULL)

{

inorder(root->left);

printf("%d\t", root->data);

inorder(root->right);

}
}

void preorder(NODE *root)

{

if(root != NULL)

{

printf("%d\t", root->data);

preorder(root->left);

preorder(root->right);

}

}

void postorder(NODE *root)

{

if(root != NULL)

{

postorder(root->left);

postorder(root->right);

printf("%d\t", root->data);

}

}

NODE *search(NODE *root, int data)

{

if(root == NULL)

printf("\nElement not found");

else if(data < root->data)

root->left = search(root->left, data);

else if(data > root->data)

root->right = search(root->right, data);

else

printf("\nElement found is: %d", root->data);

return root;

}

void main()

{

int data, ch, i, n;

NODE *root = NULL;

while (1)

{

printf("\n1.Creation of Binary Search Tree");

printf("\n2.Inorder\n3.Preorder\n4.Postorder\n5.Search\n6.Exit");

printf("\nEnter your choice: ");

scanf("%d", &ch);

switch (ch)

{

case 1: printf("\nEnter N value: " );

scanf("%d", &n);

printf("\nEnter the values to create BST like(6,9,5,2,8,15,24,14,7,8,5,2)\n");

for(i=0; i<n; i++)

{
scanf("%d", &data);

root = createtree(root, data);

}

break;

case 2: printf("\nInorder Traversal: \n");

inorder(root);

break;

case 3: printf("\nPreorder Traversal: \n");

preorder(root);

break;

case 4: printf("\nPostorder Traversal: \n");

postorder(root);

break;

case 5: printf("\nEnter the element to Search: ");

scanf("%d", &data);

root=search(root, data);

break;

case 6: exit(0);

default: printf("\nWrong Option");

break;

}

}

}
